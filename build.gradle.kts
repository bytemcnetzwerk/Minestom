import java.time.Duration

plugins {
    `java-library`
    alias(libs.plugins.blossom)

    `maven-publish`
    alias(libs.plugins.nexuspublish)
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

// Read env vars (used for publishing generally)
version = "1.21.3-SNAPSHOT"
val channel = System.getenv("MINESTOM_CHANNEL") ?: "local" // local, snapshot, release

val shortDescription = "1.21 Lightweight Minecraft server"

allprojects {
    apply(plugin = "java")
    apply(plugin = "java-library")
    apply(plugin = "maven-publish")

    group = "net.minestom"
    version = rootProject.version
    description = shortDescription

    repositories {
        mavenLocal()
        mavenCentral()
    }

    configurations.all {
        // We only use Jetbrains Annotations
        exclude("org.checkerframework", "checker-qual")
    }

    java {
        withSourcesJar()
        withJavadocJar()

        toolchain.languageVersion = JavaLanguageVersion.of(21)
    }

    tasks.withType<Zip> {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    }

    tasks.withType<Test> {
        useJUnitPlatform()

        // Viewable packets make tracking harder. Could be re-enabled later.
        jvmArgs("-Dminestom.viewable-packet=false")
        jvmArgs("-Dminestom.inside-test=true")
        minHeapSize = "512m"
        maxHeapSize = "1024m"
    }

    tasks.withType<JavaCompile> {
        options.encoding = "UTF-8"
    }

    publishing {
        publications {
            create<MavenPublication>("mavenJava") {
                this.groupId = group.toString()
                this.artifactId = artifactId
                this.version = version.toString()

                from(components["java"])
            }
        }
        repositories {
            maven {
                name = "bytemc"
                url = if (version.toString().endsWith("SNAPSHOT")) {
                    if (hasProperty("BYTEMC_REPO_URL_SNAPSHOTS")) {
                        uri(property("BYTEMC_REPO_URL_SNAPSHOTS").toString())
                    } else {
                        uri(System.getenv("BYTEMC_REPO_URL_SNAPSHOTS"))
                    }
                } else {
                    if (hasProperty("BYTEMC_REPO_URL_RELEASES")) {
                        uri(property("BYTEMC_REPO_URL_RELEASES").toString())
                    } else {
                        uri(System.getenv("BYTEMC_REPO_URL_RELEASES"))
                    }
                }
                isAllowInsecureProtocol = true
                credentials {
                    this.username = if (hasProperty("BYTEMC_REPO_USER")) {
                        property("BYTEMC_REPO_USER").toString()
                    } else {
                        System.getenv("BYTEMC_REPO_USER")
                    }
                    this.password = if (hasProperty("BYTEMC_REPO_PASSWORD")) {
                        property("BYTEMC_REPO_PASSWORD").toString()
                    } else {
                        System.getenv("BYTEMC_REPO_PASSWORD")
                    }
                }
            }
        }
    }
}

sourceSets {
    main {
        java.srcDir(file("src/main/java"))
        java.srcDir(file("src/autogenerated/java"))
    }
}

dependencies {
    // Core dependencies
    implementation(libs.slf4j)
    implementation(libs.log4j)

    api(libs.jetbrainsAnnotations)
    api(libs.bundles.adventure)
    implementation(libs.minestomData)

    // Performance/data structures
    api(libs.fastutil)
    implementation(libs.bundles.flare)
    api(libs.gson)
    implementation(libs.jcTools)

    // Testing
    testImplementation(libs.bundles.junit)
    testImplementation(project(":testing"))
}

tasks {
    jar {
        manifest {
            attributes("Automatic-Module-Name" to "net.minestom.server")
        }
    }
    withType<Javadoc> {
        (options as? StandardJavadocDocletOptions)?.apply {
            encoding = "UTF-8"

            // Custom options
            addBooleanOption("html5", true)
            addStringOption("-release", "21")
            // Links to external javadocs
            links("https://docs.oracle.com/en/java/javase/21/docs/api/")
            links("https://jd.advntr.dev/api/${libs.versions.adventure.get()}/")
        }
    }
}
